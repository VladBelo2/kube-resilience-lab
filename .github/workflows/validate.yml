name: üß™ Validate Kube Resilience Lab

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-vagrant-lab:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: üì• Checkout Repo
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Install VirtualBox
      run: |
        sudo apt-get update
        sudo apt-get install -y virtualbox

    - name: ‚öôÔ∏è Install Vagrant (via HashiCorp .deb)
      run: |
        curl -O https://releases.hashicorp.com/vagrant/2.4.1/vagrant_2.4.1-1_amd64.deb
        sudo apt install ./vagrant_2.4.1-1_amd64.deb

    - name: üöÄ Start Lab VM (headless)
      run: |
        vagrant up --no-provision
        vagrant provision

    - name: ‚úÖ Check Pod Readiness
      run: |
        echo "[INFO] Waiting for all pods to be Ready..."
        for i in {1..20}; do
        UNREADY_COUNT=$(vagrant ssh -c '
          kubectl get pods -A -o json |
          jq "[.items[] 
            | select(
                (
                  # Exclude completed/helm/svclb helper pods
                  (.status.phase == \"Succeeded\" or .status.phase == \"Completed\") or
                  (.metadata.labels.app == \"svclb\") or
                  (.metadata.ownerReferences[]? | select(.kind == \"Job\" or (.name | test(\"^helm-install-.*\"))))
                ) | not
              )
            | select(
                (
                .status.phase != "Running"
                or (.status.containerStatuses | type != "array")
                or (.status.containerStatuses | map(.ready) | any(. == false))
                or (
                  (.status.conditions // [])
                  | map(select(.type == "Ready" and .status != "True"))
                  | length > 0
                )
              )
            )
          ] | length"
        ' | tr -d '\r')

          echo "[CHECK] Unready pods: $UNREADY_COUNT (attempt $i/20)"

          if [[ $UNREADY_COUNT =~ ^[0-9]+$ ]] && [ $UNREADY_COUNT -eq 0 ]; then
            echo '‚úÖ All pods are Ready!'
            echo 'üìã List of all Running pods:'
            vagrant ssh -c 'kubectl get pods -A -o wide'
            exit 0
          fi

          sleep 15
        done

        echo '‚ùå Pods failed to become Ready in time'
        echo 'üìã Final pod list:'
        vagrant ssh -c 'kubectl get pods -A -o wide'

        echo 'üß™ Detailed status of unready pods:'
        vagrant ssh -c '
          kubectl get pods -A -o json |
          jq -r "
            .items[] |
            select(
              (
                .status.phase != \"Running\" and .status.phase != \"Succeeded\"
              ) or (
                .status.phase == \"Running\" and
                (
                  (.status.containerStatuses // []) | map(.ready) | any(. == false)
                )
              ) or (
                .status.reason == \"ContainerCreating\" or .status.reason == \"PodInitializing\"
              )
            ) |
            \"Namespace: \(.metadata.namespace)\nPod: \(.metadata.name)\nStatus: \(.status.phase)\nReason: \(.status.reason)\nReady States: \((.status.containerStatuses // [])[]?.ready)\n---\""
        '
        exit 1

    - name: üì° Check Prometheus Targets
      run: |
        echo "[INFO] Waiting for Prometheus targets to become available..."

        for i in {1..10}; do
          vagrant ssh -c '
            curl -s -o /tmp/targets.json -w "HTTP: %{http_code}\n" http://localhost:9090/api/v1/targets
          ' > curl_output.txt 2>&1

          if grep -q "HTTP: 200" curl_output.txt; then
            echo "[OK] Prometheus responded."
            if vagrant ssh -c "grep -q '\"health\":\"up\"' /tmp/targets.json"; then
              echo "‚úÖ Prometheus has active targets"
              break
            else
              echo "[WAIT] Prometheus up, but targets not ready yet (attempt $i/10)"
            fi
          else
            echo "[WAIT] Prometheus not reachable yet (attempt $i/10)"
          fi

          sleep 10
        done

        echo "[INFO] Final Prometheus target dump:"
        vagrant ssh -c 'cat /tmp/targets.json || echo "No targets.json found."'

        if ! vagrant ssh -c "grep -q '\"health\":\"up\"' /tmp/targets.json"; then
          echo "‚ùå Prometheus targets not healthy."
          exit 1
        fi

    - name: üß™ Optional Curl App URLs
      run: |
        vagrant ssh -c '
          curl -s -o /dev/null -w "%{http_code}" http://microfail.kube-lab.local | grep 200
        '
